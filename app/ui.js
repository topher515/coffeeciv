// Generated by CoffeeScript 1.3.3
(function() {
  var Civ, UI, Utils, context, tpl, tplCache;

  context = window;

  Civ = context.Civ || (context.Civ = {});

  UI = Civ.UI || (Civ.UI = {});

  Utils = Civ.Utils || (Civ.Utils = {});

  tplCache = {};

  UI.uxDispatcher = _.clone(Backbone.Events);

  tpl = function(selector) {
    return function(tplCtx) {
      var $t;
      if (!tplCache[selector]) {
        $t = $(selector);
        if ($t.length === 0) {
          throw "Template missing error: " + id;
        }
        tplCache[selector] = _.template($t.html());
      }
      return tplCache[selector](tplCtx);
    };
  };

  UI.Model = Backbone.Model.extend();

  UI.View = Backbone.View.extend({
    getSubview: function(model) {
      var _ref;
      return (_ref = this._subviews) != null ? _ref[model.cid] : void 0;
    },
    removeSubview: function(model) {
      var subview;
      subview = this.getSubview(model);
      if (subview) {
        subview.parentView = null;
        delete this._subviews[model.cid];
      }
      return subview;
    },
    setSubview: function(subview) {
      this.removeSubview(subview.model);
      if (!this._subviews) {
        this._subviews = {};
      }
      subview.parentView = this;
      return this._subviews[subview.model.cid] = subview;
    },
    getSubviews: function() {
      var modelCid, view;
      return ((function() {
        var _ref, _results;
        _ref = this._subviews;
        _results = [];
        for (modelCid in _ref) {
          view = _ref[modelCid];
          _results.push(view);
        }
        return _results;
      }).call(this)) || [];
    },
    renderWithSubviews: function(inside) {
      var $elem, fn, sv, _i, _len, _ref, _ref1, _results;
      if (this.template) {
        this.$el.html(this.template((_ref = this.model) != null ? _ref.toJSON() : void 0));
      }
      $elem = inside ? this.$(inside) : this.$el;
      fn = function(sv) {
        return $elem.append(sv.render().el);
      };
      _ref1 = this.getSubviews();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        sv = _ref1[_i];
        _results.push(fn(sv));
      }
      return _results;
    },
    bubble: function(obj, evtNames) {
      var evtName, _i, _len, _results;
      if (!_.isArray(evtNames)) {
        evtNames = [evtNames];
      }
      _results = [];
      for (_i = 0, _len = evtNames.length; _i < _len; _i++) {
        evtName = evtNames[_i];
        _results.push(obj.on(evtName, (function(evt) {
          return this.trigger(evtName, evt);
        }), this));
      }
      return _results;
    },
    unbubble: function(obj, evtName) {
      return obj.off(evtName);
    }
  });

  UI.SelectableView = UI.View.extend({
    events: {
      "click": "handleSelect"
    },
    handleSelect: function() {
      return this.trigger("select:" + this.selectName, {
        view: this,
        name: this.selectName
      });
    }
  });

  UI.SingleUnitView = UI.SelectableView.extend({
    className: "unit",
    selectName: "unit",
    render: function() {
      this.$el.html('<div class="inner"></div>');
      return this;
    }
  });

  UI.HexView = UI.View.extend({
    template: tpl('#hex-tpl'),
    className: "hex",
    initialize: function(options) {
      this.ux = options.ux;
      this.worldView = options.worldView;
      this.$el.addClass(this.model.get('appearance'));
      this.$el.attr('id', 'hex-' + this.model.id);
      if (this.model.get('isRoot')) {
        this.$el.addClass('root');
      }
      this.worldView.registerHexView(this);
      return this.model.on('unit:create', this.handleUnitCreate, this);
    },
    handleUnitCreate: function(evt) {
      var sv;
      sv = this.setSubview(new UI.SingleUnitView({
        model: evt.unit
      }));
      this.ux.registerSelectable(sv);
      return this.render();
    },
    render: function() {
      this.renderWithSubviews();
      return this;
    }
  });

  UI.HexRowView = UI.View.extend({
    className: "hexrow",
    initialize: function(options) {
      this.rootHex = options.rootHex;
      this.ux = options.ux;
      return this.worldView = options.worldView;
    },
    newHexView: function(model) {
      var hexView;
      hexView = new UI.HexView({
        model: model,
        ux: this.ux,
        worldView: this.worldView
      });
      this.bubble(hexView, 'unit:create');
      this.bubble(hexView, 'unit:arrive');
      this.bubble(hexView, 'unit:leave');
      return hexView;
    },
    render: function() {
      var appender, prepender, self;
      self = this;
      this.$el.html('');
      appender = function(hex) {
        return self.$el.append(self.newHexView(hex).render().el);
      };
      prepender = function(hex) {
        return self.$el.prepend(self.newHexView(hex).render().el);
      };
      this.rootHex.applyRight(appender, {
        inclusive: true
      });
      this.rootHex.applyLeft(prepender);
      return this;
    }
  });

  UI.HexWorldView = UI.View.extend({
    el: '#hexworld',
    initialize: function(options) {
      this.rootHex = this.model.root;
      this.ux = options.ux;
      this.hexViewByModel = {};
      this.model.on('unit:move', this.handleUnitMove, this);
      return _.bindAll(this);
    },
    registerHexView: function(hexView) {
      return this.hexViewByModel[hexView.model.cid] = hexView;
    },
    getHexView: function(model) {
      return this.hexViewByModel[model.cid];
    },
    handleUnitMove: function(evt) {
      var from, to, unitView;
      from = this.getHexView(evt.from);
      to = this.getHexView(evt.to);
      unitView = from.removeSubview(evt.unit);
      to.setSubview(unitView);
      from.render();
      return to.render();
    },
    newHexRowView: function(model) {
      var rowView;
      rowView = new UI.HexRowView({
        rootHex: model,
        ux: this.ux,
        worldView: this
      });
      this.bubble(rowView, 'unit:create');
      this.bubble(rowView, 'unit:arrive');
      this.bubble(rowView, 'unit:leave');
      return rowView;
    },
    render: function() {
      var appender, prepender, self;
      self = this;
      this.$el.html('');
      appender = function(hex) {
        return self.$el.append(self.newHexRowView(hex).render().el);
      };
      prepender = function(hex) {
        return self.$el.prepend(self.newHexRowView(hex).render().el);
      };
      this.rootHex.applyDown(appender, {
        inclusive: true
      });
      this.rootHex.applyUp(prepender);
      return this;
    }
  });

  UI.UXController = UI.View.extend({
    initialize: function(opts) {
      return this.selectables = [];
    },
    handleKeydown: function(event) {
      return event.keyCode;
    },
    registerSelectable: function(selectableView) {
      this.selectables.push(selectableView);
      return this.bubble(selectableView, 'select:unit');
    },
    unregisterSelectable: function(selectableView) {
      return this.unbubble(selectableView, 'select:unit');
    }
  });

  UI.HumanController = UI.View.extend({
    initialize: function(opts) {
      this.world = opts.world;
      this.humanPlayer = opts.humanPlayer;
      this.ux = opts.ux;
      this.ux.on('select:unit', this.handleSelectUnit, this);
      this.ux.on('deselect:unit', this.handleDeselectUnit, this);
      this.selectedUnitView = null;
      return this.initKeyCommands();
    },
    move: function(dir) {
      var _ref;
      return (_ref = this.selectedUnitView) != null ? _ref.model.move(dir) : void 0;
    },
    initKeyCommands: function() {
      var self;
      self = this;
      Mousetrap.bind("esc", function() {
        return self.handleDeselectUnit();
      });
      Mousetrap.bind("up", function() {
        return self.move("n");
      });
      Mousetrap.bind("down", function() {
        return self.move("s");
      });
      Mousetrap.bind("left up", function() {
        return self.move("nw");
      });
      Mousetrap.bind("left down", function() {
        return self.move("sw");
      });
      Mousetrap.bind("right up", function() {
        return self.move("ne");
      });
      return Mousetrap.bind("right down", function() {
        return self.move("se");
      });
    },
    handleSelectUnit: function(evt) {
      var _ref, _ref1;
      if ((_ref = this.selectedUnitView) != null) {
        _ref.$el.removeClass('selected');
      }
      this.selectedUnitView = evt.view;
      return (_ref1 = this.selectedUnitView) != null ? _ref1.$el.addClass('selected') : void 0;
    },
    handleDeselectUnit: function(evt) {
      var _ref;
      return (_ref = this.selectedUnitView) != null ? _ref.$el.removeClass('selected') : void 0;
    }
  });

}).call(this);
