// Generated by CoffeeScript 1.3.3
(function() {
  var Civ, UI, Utils, context, tpl, tplCache;

  context = window;

  Civ = context.Civ || (context.Civ = {});

  UI = Civ.UI || (Civ.UI = {});

  Utils = Civ.Utils || (Civ.Utils = {});

  tplCache = {};

  tpl = function(selector) {
    return function(tplCtx) {
      var $t;
      if (!tplCache[selector]) {
        $t = $(selector);
        if ($t.length === 0) {
          throw "Template missing error: " + id;
        }
        tplCache[selector] = _.template($t.html());
      }
      return tplCache[selector](tplCtx);
    };
  };

  UI.Model = Backbone.Model.extend();

  UI.View = Backbone.View.extend({
    getSubview: function(model) {
      var _ref;
      return (_ref = this._subviews) != null ? _ref[model.cid] : void 0;
    },
    removeSubview: function(model) {
      var subview;
      subview = this.getSubview(model);
      if (subview) {
        subview.parentView = null;
        delete this._subviews[model.cid];
      }
      return subview;
    },
    setSubview: function(subview) {
      this.removeSubview(subview.model);
      if (!this._subviews) {
        this._subviews = {};
      }
      subview.parentView = this;
      return this._subviews[subview.model.cid] = subview;
    },
    getSubviews: function() {
      var modelCid, view;
      return ((function() {
        var _ref, _results;
        _ref = this._subviews;
        _results = [];
        for (modelCid in _ref) {
          view = _ref[modelCid];
          _results.push(view);
        }
        return _results;
      }).call(this)) || [];
    },
    renderWithSubviews: function(inside) {
      var $elem, fn, sv, _i, _len, _ref, _ref1, _results;
      if (this.template) {
        this.$el.html(this.template((_ref = this.model) != null ? _ref.toJSON() : void 0));
      }
      $elem = inside ? this.$(inside) : this.$el;
      fn = function(sv) {
        return $elem.append(sv.render().el);
      };
      _ref1 = this.getSubviews();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        sv = _ref1[_i];
        _results.push(fn(sv));
      }
      return _results;
    }
  });

  UI.HexView = UI.View.extend({
    template: tpl('#hex-tpl'),
    className: "hex",
    initialize: function(options) {
      this.$el.addClass(this.model.get('appearance'));
      return this.$el.attr('id', 'hex-' + this.model.id);
    },
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    }
  });

  UI.HexRowView = UI.View.extend({
    className: "hexrow",
    initialize: function(options) {
      return this.rootHex = options.rootHex;
    },
    newHexView: function(model) {
      return new UI.HexView({
        model: model
      });
    },
    render: function() {
      var appender, prepender, self;
      self = this;
      this.$el.html('');
      appender = function(hex) {
        return self.$el.append(self.newHexView(hex).render().el);
      };
      prepender = function(hex) {
        return self.$el.prepend(self.newHexView(hex).render().el);
      };
      this.rootHex.applyRight(appender, {
        inclusive: true
      });
      this.rootHex.applyLeft(prepender);
      return this;
    }
  });

  UI.HexWorldView = UI.View.extend({
    el: '#hexworld',
    initialize: function(options) {
      return this.rootHex = options.rootHex;
    },
    newHexRowView: function(model) {
      return new UI.HexRowView({
        rootHex: this.rootHex
      });
    },
    render: function() {
      var appender, prepender, self;
      self = this;
      this.$el.html('');
      appender = function(hex) {
        return self.$el.append(self.newHexRowView(hex).render().el);
      };
      prepender = function(hex) {
        return self.$el.prepend(self.newHexRowView(hex).render().el);
      };
      this.rootHex.applyDown(appender, {
        inclusive: true
      });
      this.rootHex.applyUp(prepender);
      return this;
    }
  });

}).call(this);
