// Generated by CoffeeScript 1.3.3
(function() {
  var Civ, Discoveries, UI, Utils, context,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  context = window;

  Civ = context.Civ || (context.Civ = {});

  UI = Civ.UI || (Civ.UI = {});

  Utils = Civ.Utils || (Civ.Utils = {});

  Civ.Discovery = (function() {

    function Discovery() {
      this.progress = 0;
    }

    Discovery.prototype.getRemaining = function() {
      return this.cost - this.progress;
    };

    Discovery.prototype.getDisables = function() {
      return this.disables;
    };

    Discovery.prototype.getEnables = function() {
      return this.enables;
    };

    return Discovery;

  })();

  Discoveries = Civ.Discoveries = {};

  Discoveries.Bliss = (function(_super) {

    __extends(Bliss, _super);

    function Bliss() {
      return Bliss.__super__.constructor.apply(this, arguments);
    }

    Bliss.prototype.name = "Ignorance";

    Bliss.prototype.id = "bliss";

    Bliss.prototype.enables = ["pottery"];

    Bliss.prototype.cost = 0.0;

    return Bliss;

  })(Civ.Discovery);

  Discoveries.Feudalism = (function(_super) {

    __extends(Feudalism, _super);

    function Feudalism() {
      return Feudalism.__super__.constructor.apply(this, arguments);
    }

    Feudalism.prototype.name = "Feudalism";

    Feudalism.prototype.id = 'feud';

    Feudalism.prototype.enables = [];

    Feudalism.prototype.cost = 20.0;

    return Feudalism;

  })(Civ.Discovery);

  Discoveries.Pottery = (function(_super) {

    __extends(Pottery, _super);

    function Pottery() {
      return Pottery.__super__.constructor.apply(this, arguments);
    }

    Pottery.prototype.name = "Pottery";

    Pottery.prototype.id = 'pot';

    Pottery.prototype.enables = [];

    Pottery.prototype.cost = 5.0;

    return Pottery;

  })(Civ.Discovery);

  Civ.ScienceGraph = (function() {

    function ScienceGraph(civ) {
      this.civ = civ;
      this.root = new Discoveries.Bliss;
      this.current = null;
      this.last = this.root;
    }

    ScienceGraph.prototype.doProgress = function(pts) {
      var remainder;
      if (this.current.getRemaining() > pts) {
        this.current.progress += pts;
        return;
      }
      remainder = pts - this.current.getRemaining();
      this.current = this.civ.player.decideNextScience();
      return this.doProgress();
    };

    return ScienceGraph;

  })();

}).call(this);
